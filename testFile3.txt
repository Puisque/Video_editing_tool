
1
00:00:00.160 --> 00:00:04.880
Hey what's up guys. Welcome to CertBros! In this video we're going to be looking

2
00:00:04.880 --> 00:00:21.039
at vlans okay so vlan stands for virtual

import os
import shutil
import addNum, fileRewrite

# directory = "asl_pondering_sentenceLevel30"
#
# parent_dir = "/Users/aislin/Desktop/asl/processing/"
#
# path_new = os.path.join(parent_dir, directory)
# # creating new folder
# os.mkdir(path_new)
# print("Directory '% s' created" % directory)
#
# print(path_new)
# os.chdir(path_new)
# cwd = os.getcwd()
# print("Current working directory is:", cwd)
# # make a copy of the video
# src = "/Users/aislin/Desktop/asl/asl_ponderings/30/hannahtest.mp4"##modify path on this
# dst = cwd
# shutil.copy2(src, dst)
# initial = "/Users/aislin/Desktop/asl/processing/asl_pondering_sentenceLevel30/hannahtest.mp4"##modify asl_pondering_sentenceLevel15 after this
# final = "/Users/aislin/Desktop/asl/processing/asl_pondering_sentenceLevel30/hci01.mp4"##modify this
# os.rename(initial, final)
# # make a copy of the text file
# txt_src = "/Users/aislin/Desktop/asl/asl_ponderings/30/hannahtest.txt"##change this
# txt_dst = "/Users/aislin/Desktop/asl/processing/testFile3.txt"
# shutil.copy2(txt_src, txt_dst)
# # done just made the copy of the text file
#
# # adding number to testFile3
# addNum.addNum(txt_dst)
# originalScript = "/Users/aislin/Desktop/asl/processing/testFile3.txt"
# dst_file_path = "/Users/aislin/Desktop/asl/processing/asl_pondering_sentenceLevel29"
# shutil.copy2(originalScript, dst_file_path)
# copy file3 to file1 and file2
file3 = "/Users/aislin/Desktop/asl/processing/testFile3.txt"
file1 = "/Users/aislin/Desktop/asl/processing/testFile1.txt"
file2 = "/Users/aislin/Desktop/asl/processing/testFile2.txt"
shutil.copy2(file3, file1)
shutil.copy2(file3, file2)

# checking current directory
cwd_curr = os.getcwd()
print("Current working directory is:", cwd_curr)

# running rewrite
video = "/Users/aislin/Desktop/asl/processing/asl_pondering_sentenceLevel30/hci01.mp4"##modify this [after asl_pondering_sentenceLevel15]
fileRewrite.fileProcess(file1, video)


4
00:00:27.920 --> 00:00:33.440
smaller chunks but why would we want to do that? Well

5
00:00:33.440 --> 00:00:37.600
there are a few reasons why we might want to use VLANs

6
00:00:37.600 --> 00:00:40.960
one of the main reasons is something we've already spoken about

7
00:00:40.960 --> 00:00:47.200
and that is broadcast traffic. So let's remind ourselves about

8
00:00:47.200 --> 00:00:53.199
broadcasts. A LAN is a single area of a network

9
00:00:53.199 --> 00:00:56.239
and in this case, we have a single broadcast domain

10
00:00:56.239 --> 00:00:59.840
created by our switch

11
00:01:00.000 --> 00:01:05.199
if host A sends a broadcast then every device will receive it

12
00:01:05.199 --> 00:01:10.560
that's fine for our 4 computer network but let's imagine each computer

13
00:01:10.560 --> 00:01:14.960
represents an entire department

14
00:01:15.759 --> 00:01:19.439
very quickly broadcast traffic can start to slow down our networks

15
00:01:19.439 --> 00:01:26.720
and devices. So we need a way to manage all of this traffic. One way

16
00:01:26.720 --> 00:01:34.079
is to add a router. This would create separate broadcast domains per interface

17
00:01:34.079 --> 00:01:37.600
but it's an extra bit of hardware to purchase install

18
00:01:37.600 --> 00:01:43.360
cable and manage. Another, more radical option is to physically

19
00:01:43.360 --> 00:01:48.079
split the network into separate sections. This would create

20
00:01:48.079 --> 00:01:53.840
broadcast domains for each department. Traffic wouldn't be sent from one

21
00:01:53.840 --> 00:01:58.399
department to the other which drastically reduces our broadcast

22
00:01:58.399 --> 00:02:02.479
overhead. But this option still has the issue of

23
00:02:02.479 --> 00:02:06.000
needing to purchase and set up new equipment and neither one

24
00:02:06.000 --> 00:02:09.759
of these options is very scalable. Say we wanted to add a

25
00:02:09.759 --> 00:02:13.520
new department both options would require work to set

26
00:02:13.520 --> 00:02:17.280
up and we don't want to do that. This is

27
00:02:17.280 --> 00:02:22.000
where VLANs come in VLANs give us all of the benefits of

28
00:02:22.000 --> 00:02:26.640
physically separating our network but with the added bonus of being able

29
00:02:26.640 --> 00:02:30.160
to do this virtually. The traffic still behaves in

30
00:02:30.160 --> 00:02:34.160
the same way as if it was physically split. Traffic isn't forwarded

31
00:02:34.160 --> 00:02:38.400
to any other departments and it's almost like having four

32
00:02:38.400 --> 00:02:43.120
miniature switches inside our single one

33
00:02:43.120 --> 00:02:47.120
The way this works is by assigning interfaces to specific

34
00:02:47.120 --> 00:02:53.280
VLANs. Only interfaces in the same VLAN can communicate with each other

35
00:02:53.280 --> 00:02:57.280
in this example finance is yellow IT is red

36
00:02:57.280 --> 00:03:02.959
Sales is green and HRis purple. I'm using colors but in reality, you will

37
00:03:02.959 --> 00:03:09.040
probably use numbers such as VLAN 10 VLAN 20 etc

38
00:03:09.040 --> 00:03:13.120
If we wanted to add a new finance server then we just need to assign that

39
00:03:13.120 --> 00:03:16.640
interface to the finance VLAN and communication

40
00:03:16.640 --> 00:03:20.239
between those two interfaces is allowed because they're on the same

41
00:03:20.239 --> 00:03:22.640
VLAN

42
00:03:23.280 --> 00:03:26.640
If we wanted to add a brand new marketing department

43
00:03:26.640 --> 00:03:31.680
then we just create that VLAN and assign it to an interface

44
00:03:31.680 --> 00:03:37.519
As you can see VLANs make it very very easy to control broadcast domains

45
00:03:37.519 --> 00:03:40.720
It's also scalable. We don't need new equipment

46
00:03:40.720 --> 00:03:45.440
or to re-cable everything anytime you want to make a change

47
00:03:45.440 --> 00:03:52.400
okay, so that's the overview. Let's look at how this works in a bit more detail

48
00:03:52.400 --> 00:03:55.680
Straight out of the box Cisco and most other switches

49
00:03:55.680 --> 00:04:02.000
have a default VLAN called VLAN 1. Every interface is assigned the default

50
00:04:02.000 --> 00:04:04.959
VLAN. So this means every interface can talk

51
00:04:04.959 --> 00:04:08.720
to each other. From here we can start to make our own

52
00:04:08.720 --> 00:04:13.599
VLANs and split up our switch.we may want to make a VLAN called VLAN

53
00:04:13.599 --> 00:04:18.079
10 and another called VLAN 20

54
00:04:18.079 --> 00:04:23.759
You can add up to 4094 VLANs.This is the maximum number that is

55
00:04:23.759 --> 00:04:26.320
supported

56
00:04:26.479 --> 00:04:30.479
So now interfaces assigned to VLAN 10 can only communicate with

57
00:04:30.479 --> 00:04:37.120
other interfaces assigned to VLAN 10 and it's the same for VLAN 20.

58
00:04:37.120 --> 00:04:40.400
VLANs aren't restricted to just one switch

59
00:04:40.400 --> 00:04:44.080
We can have the same VLANs across multiple switches.

60
00:04:44.080 --> 00:04:47.600
This makes it very versatile and scalable

61
00:04:47.600 --> 00:04:52.160
But this does leave us with a problem. If interfaces can only communicate with

62
00:04:52.160 --> 00:04:57.199
other interfaces in the same VLAN, which VLAN do we assign to the link between

63
00:04:57.199 --> 00:05:01.919
our two switches? If we leave it as the default VLAN, VLAN

64
00:05:01.919 --> 00:05:06.400
10 and VLAN 20 won't be able to send traffic. If we

65
00:05:06.400 --> 00:05:10.639
assign it to one of our new VLANs then only that VLAN can send traffic

66
00:05:10.639 --> 00:05:15.199
between the two switches. The solution is a special type of

67
00:05:15.199 --> 00:05:18.880
interface called a trunk

68
00:05:19.120 --> 00:05:22.800
So there are two types of ports on a switch, an access port

69
00:05:22.800 --> 00:05:26.880
and a trunk port. When a port is assigned to a VLAN

70
00:05:26.880 --> 00:05:32.400
like VLAN 10 and VLAN 20 here this is known as an access port

71
00:05:32.400 --> 00:05:35.440
An access port is designed for endpoint devices

72
00:05:35.440 --> 00:05:40.960
to access the network such as computers and laptops. Now a

73
00:05:40.960 --> 00:05:45.120
trunk port can send traffic from different VLANs

74
00:05:45.120 --> 00:05:49.360
They're used to send traffic between networking devices

75
00:05:49.360 --> 00:05:54.240
This leaves us with another problem though. How does the receiving switch

76
00:05:54.240 --> 00:05:59.520
know which VLAN the traffic belongs to? The whole point of a VLAN is to separate

77
00:05:59.520 --> 00:06:03.120
traffic. So when a trunk sends data that could be

78
00:06:03.120 --> 00:06:07.600
from VLAN 1, VLAN 10 or VLAN 20 it needs a way to

79
00:06:07.600 --> 00:06:11.759
identify which VLAN that traffic belongs to

80
00:06:11.759 --> 00:06:15.680
This is done by using something called a tag

81
00:06:15.680 --> 00:06:20.720
To understand tags we need to take a couple of steps back

82
00:06:20.720 --> 00:06:26.960
Now most devices including computers do not know what VLANs are

83
00:06:26.960 --> 00:06:30.080
Some devices are VLAN aware such as ip phones

84
00:06:30.080 --> 00:06:34.400
but most are not. So a computer generates a frame

85
00:06:34.400 --> 00:06:38.880
as normal. When that frame arrives at a switch

86
00:06:38.880 --> 00:06:43.759
it's the switch that handles the VLANs. then it's forwarded to the correct

87
00:06:43.759 --> 00:06:47.120
destination. The sending computer and the receiving

88
00:06:47.120 --> 00:06:52.560
computer have no idea that VLANs were used. Now

89
00:06:52.560 --> 00:06:56.160
when we have multiple switches connected with a trunk port

90
00:06:56.160 --> 00:07:02.400
there is an extra step. The computer sends the frame as usual but when the

91
00:07:02.400 --> 00:07:06.160
switch sends a frame over the trunk port it adds a new bit of

92
00:07:06.160 --> 00:07:11.160
information. This is called an 802.1q tag

93
00:07:11.160 --> 00:07:17.440
802.1q is the IEEE standard. It can also be called Dot1q. This tag

94
00:07:17.440 --> 00:07:21.919
is 4 bytes and it contains a few bits of information

95
00:07:21.919 --> 00:07:28.520
TPID or tag protocol identifier. This is used to identify the frame as an

96
00:07:28.520 --> 00:07:33.360
802.1q tagged frame. It could also be ISL but is

97
00:07:33.360 --> 00:07:38.400
rarely used today. TCI or tag control information

98
00:07:38.400 --> 00:07:42.960
this contains three bits of information. The priority

99
00:07:42.960 --> 00:07:47.199
DEI or drop eligible indicator and most importantly

100
00:07:47.199 --> 00:07:55.120
the VLAN id. This tag field is then read and removed by the receiving switch

101
00:07:55.120 --> 00:07:59.919
So to recap the frame is untagged when it's sent from the computer

102
00:07:59.919 --> 00:08:05.120
is tagged over the trunk port it's then sent to the destination

103
00:08:05.120 --> 00:08:10.840
computer untagged and our computers are again none the

104
00:08:10.840 --> 00:08:14.639
wiser. The next thing we need to talk about is

105
00:08:14.639 --> 00:08:20.319
something called native VLANs. A native VLAN is configured

106
00:08:20.319 --> 00:08:26.479
per trunk interface. It's the VLAN that the switch assumes the frame is on

107
00:08:26.479 --> 00:08:30.639
if it arrives on a trunk port with no tag

108
00:08:30.639 --> 00:08:36.880
By default the native VLAN is VLAN 1. So let's say both of our computers

109
00:08:36.880 --> 00:08:41.120
are assigned to the default vlan 1.

110
00:08:41.120 --> 00:08:46.480
Just like before, the frame is sent untagged to the switch

111
00:08:46.480 --> 00:08:49.920
Now if a switch is sending a frame across a trunk port

112
00:08:49.920 --> 00:08:52.959
that belongs to its native VLAN the frame

113
00:08:52.959 --> 00:08:58.800
is not tagged. When a switch receives a frame on its trunk port without a tag

114
00:08:58.800 --> 00:09:01.839
it will assume that frame belongs to its native

115
00:09:01.839 --> 00:09:07.600
VLAN which in this case is VLAN 1. It will then forward that frame to the

116
00:09:07.600 --> 00:09:13.680
destination, again untagged. So you might be wondering, why

117
00:09:13.680 --> 00:09:19.200
we use native VLANs. And there are a few reasons why

118
00:09:19.200 --> 00:09:26.320
Hubs can't read or write tags. All hubs can do is forward frames

119
00:09:26.320 --> 00:09:31.040
Let's say we have a hub in the middle connected to another host

120
00:09:31.040 --> 00:09:37.279
Using untagged native VLANs means we can send frames to our new host

121
00:09:37.279 --> 00:09:41.839
If we didn't use native VLANs and the frame was sent tagged

122
00:09:41.839 --> 00:09:45.760
then the host will just discard the frame because it doesn't understand

123
00:09:45.760 --> 00:09:51.519
VLAN tags. So a native VLAN is configured per trunk

124
00:09:51.519 --> 00:09:56.880
interface. This can lead to problems. For example

125
00:09:56.880 --> 00:10:00.560
let's say we change one side of our trunk to have the native VLAN

126
00:10:00.560 --> 00:10:06.959
of 20 instead of 1. We now have two switches with different

127
00:10:06.959 --> 00:10:10.720
native VLANs. Our computer will send the frame

128
00:10:10.720 --> 00:10:14.399
As before, the first switch will see the interface

129
00:10:14.399 --> 00:10:19.040
is assigned to its native VLAN and then forward that frame untagged

130
00:10:19.040 --> 00:10:23.839
across the trunk. Do you see the problem here? The second

131
00:10:23.839 --> 00:10:27.760
switch will assume the traffic should belong to

132
00:10:27.760 --> 00:10:32.880
its native VLAN, VLAN 20 and the frame will not be sent to the

133
00:10:32.880 --> 00:10:38.000
destination computer on VLAN 1. Luckily in real life you will be

134
00:10:38.000 --> 00:10:41.279
alerted to this type of configuration on the switch

135
00:10:41.279 --> 00:10:44.320
You'll probably see a message like this saying

136
00:10:44.320 --> 00:10:47.400
"native VLAN mismatch"

137
00:10:47.600 --> 00:10:49.520
This video is part of our full CCNA Course

138
00:10:49.520 --> 00:10:53.040
which can be found in the description. So please feel free

139
00:10:53.040 --> 00:10:55.480
to go and check that out.

140
00:10:55.480 --> 00:10:57.360
Don't forget to like, comment and

141
00:10:57.360 --> 00:11:01.360
subscribe. The support from you guys really helps this channel grow.

142
00:11:01.360 --> 00:11:17.200
other than that, thank you for watching! 👍


